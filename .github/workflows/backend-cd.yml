name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:
env:
  IMAGE_REPO_NAME: backend
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$${{ secrets.AWS_REGION }}.amazonaws.com

jobs:
  checkout:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      id: checkout

    - name: Get cache key
      id: cache-key
      run: echo "::set-output name=key::$(echo ${{ hashFiles('**/Pipfile.lock') }})"

  lint:
    needs: checkout
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Cache pipenv virtualenv
      uses: actions/cache@v2
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ needs.checkout.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pipenv-

    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev

    - name: Lint with Flake8
      run: pipenv run flake8

  test:
    needs: checkout
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Cache pipenv virtualenv
      uses: actions/cache@v2
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ needs.checkout.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pipenv-

    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev

    - name: Run tests
      run: pipenv run pytest

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t ${{ env.IMAGE_REPO_NAME }}:${{ github.sha }} ./backend
          docker tag ${{ env.IMAGE_REPO_NAME }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_REPO_NAME }}:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_REPO_NAME }}:${{ github.sha }}
          
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v1
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download & install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name cluster

      - name: Deploy to Kubernetes
        run: |
          cd backend/k8s
          kustomize edit set image backend=${{ env.ECR_REGISTRY }}/${{ env.IMAGE_REPO_NAME }}:${{ github.sha }}
          kustomize build . | kubectl apply -f -
